service cloud.firestore {
  match /databases/{database}/documents {
    match /adminUsers/{userId} {
      allow read: if isOwner(userId);
      allow write: if false;
    }

    match /seasons/{id} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    match /questCategories/{id} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    match /playerQuests/{id} {
      allow read: if isPlayerQuestReadAllowed();
      allow create: if isTeamLead(incomingData().teamId);
      allow update, delete: if isPlayerQuestWriteAllowed();
    }

    match /playerPoints/{id} {
      allow read: if true;
      allow write: if isTeamLead(incomingData().teamId);
    }

    match /membership/{id} {
      allow read: if true;
      allow create: if isOwner(incomingData().uid) && incomingData().isApproved == false;
      allow update, delete: if isTeamLead(existingData().teamId);
    }

    match /teams/{id} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    match /quests/{id} {
      allow read: if true;
      allow create: if isQuestWriteAllowed();
      allow update, delete: if false;
    }

    /// Utility Functions ///

    // Current DB record of document being requested
    function existingData() {
      return resource.data;
    }

    // Passed request data
    function incomingData() {
      return request.resource.data;
    }

    // Current Logged in User
    function currentUser() {
      return request.auth;
    }

    function isSignedIn() {
     return currentUser() != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getTeamData(teamId) {
      return get(/databases/$(database)/documents/teams/$(teamId)).data;
    }

    function getMembershipData(id) {
      return get(/databases/$(database)/documents/membership/$(id)).data;
    }

    /// Condition Checkers ///

    function isOwner(userId) {
      return currentUser().uid == userId;
    }

    function isTeamLeadFromDoc(teamId, membershipDoc) {
      return teamId == membershipDoc.teamId && membershipDoc.isLead;
    }

    function isTeamLead(teamId) {
      return isTeamLeadFromDoc(teamId, getMembershipData(currentUser().uid + teamId));
    }

    // Allow user read for both Owner and Team Lead only
    // TODO: this currently is not working as expected, please fix
    function isUserReadAllowed(userId) {
      return isOwner(userId) ||
        isTeamLead(getMembershipData(userId).teamId);
    }

    // Allow playerQuest read for both Owner and Team Lead only
    function isPlayerQuestReadAllowed() {
      return isTeamLead(existingData().teamId) ||
        isOwner(existingData().playerId);
    }

    // Allow playerQuest write under the ff conditions:
    // Team Lead: allow writes to all fields as long as status != 'completed'
    // Owner: allow write only when status is going to 'pending'
    //   limited to fields: status, submitted, completed, completionProof
    function isPlayerQuestWriteAllowed() {
      return (isTeamLead(existingData().teamId) && existingData().status != 'completed') ||
        (
          isOwner(existingData().playerId) &&
          incomingData().keys().hasAny(['status', 'submitted', 'completed', 'completionProof']) &&
          incomingData().status == 'pending'
        );
    }

    // Allow quest write if core tag field is false and uid field matches the id of the current user
    function isQuestWriteAllowed() {
      return incomingData().coreTag == false &&
        incomingData().keys().hasAny(['uid']) &&
        isOwner(incomingData().uid)
    }

    function getAdminData(userId) {
      return get(/databases/$(database)/documents/adminUsers/$(userId)).data;
    }

    function isAdmin() {
      return getAdminData(currentUser().uid).uid == currentUser().uid &&
        incomingData().updated_by.uid == currentUser().uid;
    }
  }
}
